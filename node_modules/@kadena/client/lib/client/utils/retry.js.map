{"version":3,"file":"retry.js","sourceRoot":"","sources":["../../../src/client/utils/retry.ts"],"names":[],"mappings":";;;AACA,mCAAgC;AAEhC,MAAM,WAAW,GAAG,CAClB,OAAe,EAIf,EAAE;IACF,IAAI,SAAS,GAAG,GAAS,EAAE,GAAE,CAAC,CAAC;IAC/B,MAAM,OAAO,GAAG,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACpD,MAAM,KAAK,GAAG,UAAU,CACtB,GAAG,EAAE,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC,EAC1C,OAAO,CACR,CAAC;QACF,SAAS,GAAG,GAAG,EAAE,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;IACxC,CAAC,CAAC,CAAC;IACH,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC;AAC3C,CAAC,CAAC;AAEK,MAAM,KAAK,GAAG,CACnB,IAAsB,EACtB,EAAE,CACF,KAAK,UAAU,OAAO,CAAC,OAAsB,EAAE,KAAK,GAAG,CAAC;IACtD,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;IAE7B,MAAM,EAAE,OAAO,GAAG,IAAI,GAAG,EAAE,GAAG,CAAC,EAAE,QAAQ,GAAG,IAAI,EAAE,GAAG,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,EAAE,CAAC;IAEnE,MAAM,WAAW,GAAG,WAAW,CAAC,OAAO,CAAC,CAAC;IAEzC,IAAI,CAAC;QACH,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,IAAI,CAAC;YAChC,WAAW,CAAC,OAAO;YACnB,yDAAyD;YACzD,IAAA,aAAK,EAAC,CAAC,CAAC;iBACL,IAAI,CAAC,IAAI,CAAC;iBACV,OAAO,CAAC,GAAG,EAAE;gBACZ,+CAA+C;gBAC/C,WAAW,CAAC,SAAS,EAAE,CAAC;YAC1B,CAAC,CAAC;SACL,CAAC,CAAC;QACH,OAAO,MAAW,CAAC;IACrB,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,CAAC,OAAO,KAAK,iBAAiB,EAAE,CAAC;YAC/D,MAAM,KAAK,CAAC;QACd,CAAC;QAED,MAAM,IAAA,aAAK,EAAC,QAAQ,CAAC,CAAC;QACtB,MAAM,YAAY,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC;QAC5C,OAAO,OAAO,CAAC,EAAE,OAAO,EAAE,OAAO,GAAG,YAAY,EAAE,QAAQ,EAAE,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;IAC3E,CAAC;AACH,CAAC,CAAC;AA/BS,QAAA,KAAK,SA+Bd","sourcesContent":["import type { IPollOptions } from '../interfaces/interfaces';\nimport { sleep } from './utils';\n\nconst rejectAfter = (\n  timeout: number,\n): {\n  stopTimer: () => void;\n  promise: Promise<void>;\n} => {\n  let stopTimer = (): void => {};\n  const promise = new Promise<void>((resolve, reject) => {\n    const timer = setTimeout(\n      () => reject(new Error('TIME_OUT_REJECT')),\n      timeout,\n    );\n    stopTimer = () => clearTimeout(timer);\n  });\n  return { stopTimer: stopTimer, promise };\n};\n\nexport const retry = <T extends object | string | void | boolean>(\n  task: () => Promise<T>,\n) =>\n  async function runTask(options?: IPollOptions, count = 0): Promise<T> {\n    const startTime = Date.now();\n\n    const { timeout = 1000 * 60 * 3, interval = 5000 } = options ?? {};\n\n    const rejectTimer = rejectAfter(timeout);\n\n    try {\n      const result = await Promise.race([\n        rejectTimer.promise,\n        // sleep for 1ms to let the timeout promise reject first.\n        sleep(1)\n          .then(task)\n          .finally(() => {\n            // stop the timer if the task already fulfilled\n            rejectTimer.stopTimer();\n          }),\n      ]);\n      return result as T;\n    } catch (error) {\n      if (error !== undefined && error.message === 'TIME_OUT_REJECT') {\n        throw error;\n      }\n\n      await sleep(interval);\n      const durationTime = Date.now() - startTime;\n      return runTask({ timeout: timeout - durationTime, interval }, count + 1);\n    }\n  };\n"]}