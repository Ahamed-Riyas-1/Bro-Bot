{"version":3,"file":"spv.js","sourceRoot":"","sources":["../../../src/client/api/spv.ts"],"names":[],"mappings":";;;AACA,uEAAmD;AAGnD,0CAAuC;AAEhC,KAAK,UAAU,MAAM,CAC1B,IAAY,EACZ,UAAkB,EAClB,aAAsB;IAEtB,MAAM,KAAK,GAAG,MAAM,IAAA,0BAAG,EAAC,EAAE,UAAU,EAAE,aAAa,EAAE,EAAE,IAAI,CAAC,CAAC;IAC7D,IAAI,OAAO,KAAK,KAAK,QAAQ;QAAE,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;IACzE,OAAO,KAAK,CAAC;AACf,CAAC;AARD,wBAQC;AAEM,MAAM,OAAO,GAAG,CACrB,IAAY,EACZ,UAAkB,EAClB,aAAsB,EACtB,cAA6B,EACP,EAAE;IACxB,MAAM,IAAI,GAAG,KAAK,IAA0B,EAAE,CAC5C,MAAM,CAAC,IAAI,EAAE,UAAU,EAAE,aAAa,CAAC,CAAC;IAE1C,MAAM,QAAQ,GAAG,IAAA,aAAK,EAAC,IAAI,CAAC,CAAC;IAE7B,OAAO,QAAQ,CAAC,cAAc,CAAC,CAAC;AAClC,CAAC,CAAC;AAZW,QAAA,OAAO,WAYlB","sourcesContent":["import type { SPVResponse } from '@kadena/chainweb-node-client';\nimport { spv } from '@kadena/chainweb-node-client';\nimport type { ChainId } from '@kadena/types';\nimport type { IPollOptions } from '../interfaces/interfaces';\nimport { retry } from '../utils/retry';\n\nexport async function getSpv(\n  host: string,\n  requestKey: string,\n  targetChainId: ChainId,\n): Promise<SPVResponse> {\n  const proof = await spv({ requestKey, targetChainId }, host);\n  if (typeof proof !== 'string') throw new Error('PROOF_IS_NOT_AVAILABLE');\n  return proof;\n}\n\nexport const pollSpv = (\n  host: string,\n  requestKey: string,\n  targetChainId: ChainId,\n  pollingOptions?: IPollOptions,\n): Promise<SPVResponse> => {\n  const task = async (): Promise<SPVResponse> =>\n    getSpv(host, requestKey, targetChainId);\n\n  const retrySpv = retry(task);\n\n  return retrySpv(pollingOptions);\n};\n"]}