{"version":3,"file":"isSignedCommand.js","sourceRoot":"","sources":["../src/isSignedCommand.ts"],"names":[],"mappings":";;;AAEA;;;;;GAKG;AACH,SAAgB,eAAe,CAC7B,OAAoC;IAEpC,OAAO,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAA,CAAC,aAAD,CAAC,uBAAD,CAAC,CAAE,GAAG,MAAK,SAAS,CAAC,CAAC;AACzD,CAAC;AAJD,0CAIC;AAED;;GAEG;AACH,SAAgB,mBAAmB,CACjC,OAAoC;IAEpC,IAAI,eAAe,CAAC,OAAO,CAAC,EAAE,CAAC;QAC7B,OAAO,OAAO,CAAC;IACjB,CAAC;SAAM,CAAC;QACN,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;IAC5C,CAAC;AACH,CAAC;AARD,kDAQC","sourcesContent":["import type { ICommand, IUnsignedCommand } from '@kadena/types';\n\n/**\n * Determines if a command is signed.\n * @alpha\n * @param command -  command The command to check.\n * @returns True if the command is signed, false otherwise.\n */\nexport function isSignedCommand(\n  command: IUnsignedCommand | ICommand,\n): command is ICommand {\n  return command.sigs.every((s) => s?.sig !== undefined);\n}\n\n/**\n * @alpha\n */\nexport function ensureSignedCommand(\n  command: IUnsignedCommand | ICommand,\n): ICommand {\n  if (isSignedCommand(command)) {\n    return command;\n  } else {\n    throw new Error('Command must be signed');\n  }\n}\n"]}