{"version":3,"file":"createExp.test.js","sourceRoot":"","sources":["../../src/tests/createExp.test.ts"],"names":[],"mappings":";;AAAA,mCAA8C;AAC9C,8CAA2C;AAC3C,4CAAyC;AAEzC,IAAA,iBAAQ,EAAC,WAAW,EAAE,GAAG,EAAE;IACzB,IAAA,WAAE,EAAC,4DAA4D,EAAE,GAAG,EAAE;QACpE,MAAM,MAAM,GAAG,IAAA,qBAAS,EAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QACpC,MAAM,QAAQ,GAAG,SAAS,CAAC;QAE3B,IAAA,eAAM,EAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IACnC,CAAC,CAAC,CAAC;IAEH,IAAA,WAAE,EAAC,6EAA6E,EAAE,GAAG,EAAE;QACrF,MAAM,MAAM,GAAG,IAAA,qBAAS,EACtB,GAAG,EACH,IAAI,uBAAU,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,EAC/B,IAAI,uBAAU,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,CAChC,CAAC;QACF,MAAM,QAAQ,GAAG,WAAW,CAAC;QAE7B,IAAA,eAAM,EAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IACnC,CAAC,CAAC,CAAC;IAEH,IAAA,WAAE,EAAC,gGAAgG,EAAE,GAAG,EAAE;QACxG,MAAM,MAAM,GAAG,IAAA,qBAAS,EACtB,GAAG,EACH,IAAI,uBAAU,CAAC,GAAG,CAAC,CAAC,oBAAoB,EAAE,EAC1C,IAAI,uBAAU,CAAC,GAAG,CAAC,CAAC,oBAAoB,EAAE,CAC3C,CAAC;QACF,MAAM,QAAQ,GAAG,eAAe,CAAC;QAEjC,IAAA,eAAM,EAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IACnC,CAAC,CAAC,CAAC;IAEH,IAAA,WAAE,EAAC,qDAAqD,EAAE,GAAG,EAAE;QAC7D,MAAM,IAAI,GAAG,IAAA,qBAAS,EAAC,IAAI,CAAC,CAAC;QAC7B,MAAM,QAAQ,GAAG,MAAM,CAAC;QAExB,IAAA,eAAM,EAAC,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC9B,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { describe, expect, it } from 'vitest';\nimport { PactNumber } from '../PactNumber';\nimport { createExp } from '../createExp';\n\ndescribe('createExp', () => {\n  it('Takes in Pact function and arguments and outputs Pact code', () => {\n    const actual = createExp('+', 2, 3);\n    const expected = '(+ 2 3)';\n\n    expect(expected).toEqual(actual);\n  });\n\n  it('Takes in Pact function and arguments using PactNumber and outputs Pact code', () => {\n    const actual = createExp(\n      '+',\n      new PactNumber('2').toInteger(),\n      new PactNumber('3').toDecimal(),\n    );\n    const expected = '(+ 2 3.0)';\n\n    expect(expected).toEqual(actual);\n  });\n\n  it('Takes in Pact function and stringified number arguments using PactNumber and outputs Pact code', () => {\n    const actual = createExp(\n      '+',\n      new PactNumber('2').toStringifiedInteger(),\n      new PactNumber('3').toStringifiedDecimal(),\n    );\n    const expected = '(+ \"2\" \"3.0\")';\n\n    expect(expected).toEqual(actual);\n  });\n\n  it('does not add a space when only a function is called', () => {\n    const expr = createExp('fn');\n    const expected = '(fn)';\n\n    expect(expr).toBe(expected);\n  });\n});\n"]}