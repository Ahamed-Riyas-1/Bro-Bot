{"version":3,"file":"PactNumber.test.js","sourceRoot":"","sources":["../../src/tests/PactNumber.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { describe, expect, it } from 'vitest';\nimport { PactNumber } from '../PactNumber';\n\ndescribe('Pact Number', () => {\n  it('Takes in a big integer string as PactNumber and print it as an integer', () => {\n    const actual = new PactNumber('900719925474099100001').toInteger();\n    const expected = '900719925474099100001';\n\n    expect(expected).toEqual(actual);\n  });\n\n  it('Takes in a big integer string as PactNumber and print it as a Pact integer object', () => {\n    const actual = new PactNumber('900719925474099100001').toPactInteger();\n    const expected = { int: '900719925474099100001' };\n\n    expect(expected).toEqual(actual);\n  });\n\n  it('Takes in a big integer string as PactNumber and convert and print as a decimal', () => {\n    const pactNumber = new PactNumber('900719925474099100001');\n    const actual = pactNumber.toStringifiedInteger();\n    const expected = JSON.stringify('900719925474099100001');\n\n    expect(expected).toEqual(actual);\n  });\n\n  it('Takes in a big integer string as PactNumber and convert and print as a decimal', () => {\n    const pactNumber = new PactNumber('900719925474099100001');\n    const actual = pactNumber.toDecimal();\n    const expected = '900719925474099100001.0';\n\n    expect(expected).toEqual(actual);\n  });\n\n  it('Takes in a big integer string as PactNumber and convert and print as a stringified decimal', () => {\n    const pactNumber = new PactNumber('900719925474099100001');\n    const actual = pactNumber.toStringifiedDecimal();\n    const expected = JSON.stringify('900719925474099100001.0');\n\n    expect(expected).toEqual(actual);\n  });\n\n  it('Takes in a big integer string as PactNumber and convert and print as a Pact decimal object', () => {\n    const pactNumber = new PactNumber('900719925474099100001');\n    const actual = pactNumber.toPactDecimal();\n    const expected = { decimal: '900719925474099100001.0' };\n\n    expect(expected).toEqual(actual);\n  });\n\n  it('Takes in a big decimal string as PactNumber and print as a Pact decimal object', () => {\n    const pactNumber = new PactNumber('-0.9007199254740991192919');\n    const actual = pactNumber.toDecimal();\n    const expected = '-0.9007199254740991192919';\n\n    expect(expected).toEqual(actual);\n  });\n\n  it('Takes in a big decimal string as PactNumber and print as a Pact decimal object', () => {\n    const pactNumber = new PactNumber('-0.9007199254740991192919');\n    const actual = pactNumber.toPactDecimal();\n    const expected = { decimal: '-0.9007199254740991192919' };\n\n    expect(expected).toEqual(actual);\n  });\n\n  it('Takes in a big decimal string as PactNumber and print as a stringified decimal', () => {\n    const pactNumber = new PactNumber('-0.9007199254740991192919');\n    const actual = pactNumber.toStringifiedDecimal();\n    const expected = JSON.stringify('-0.9007199254740991192919');\n\n    expect(expected).toEqual(actual);\n  });\n\n  it('should throw an error when toInteger is called with a decimal', () => {\n    expect(() => {\n      new PactNumber('-0.9007199254740991192919').toInteger();\n    }).toThrowError('PactNumber is not an integer');\n  });\n\n  it('should throw an error when toPactInteger is called with a decimal', () => {\n    expect(() => {\n      new PactNumber('-0.9007199254740991192919').toPactInteger();\n    }).toThrowError('PactNumber is not an integer');\n  });\n\n  it('should throw an error when NaN is inputted ', () => {\n    expect(() => {\n      new PactNumber('a');\n    }).toThrowError('Value is NaN');\n  });\n\n  it('should take in big integer number as PactNumber, but precisions are lost', () => {\n    const actual = new PactNumber(900719925474099100001).toInteger();\n    const expected = '900719925474099100000';\n\n    expect(expected).toEqual(actual);\n  });\n\n  it('should take big decimal number as PactNumber, but precisions are lost', () => {\n    const actual = new PactNumber(0.9007199254740991192919).toDecimal();\n    const expected = '0.9007199254740991';\n\n    expect(expected).toEqual(actual);\n  });\n\n  it('extends plus form the BigNumber class', () => {\n    const actual = new PactNumber('0.9007199254740991192919');\n    const pactDecimal = actual.plus(1).toPactDecimal();\n    expect(pactDecimal).toStrictEqual({ decimal: '1.9007199254740991192919' });\n  });\n\n  it('extends minus form the BigNumber class', () => {\n    const actual = new PactNumber('0.9007199254740991192919');\n    const pactDecimal = actual.minus('0.9').toPactDecimal();\n    expect(pactDecimal).toStrictEqual({ decimal: '0.0007199254740991192919' });\n  });\n\n  it('does not return scientific notation for large integer', () => {\n    const number = new PactNumber(\n      '0x584712a2542d5c1ab3cd25dec0b14e53aef270e6948140656a8fbf3d2829c729',\n    );\n    const int = number.toPactInteger();\n\n    expect(int).toEqual({\n      int: '39929105424737202205146861475763790532040240744253228361760383139526688229161',\n    });\n  });\n\n  it('does not return scientific notation for large decimals', () => {\n    const number = new PactNumber(\n      '3.9929105424737202205146861475763790532040240744253228361760383139526688229161',\n    );\n    const decimal = number.toPactDecimal();\n\n    expect(decimal).toEqual({\n      decimal:\n        '3.9929105424737202205146861475763790532040240744253228361760383139526688229161',\n    });\n  });\n});\n"]}