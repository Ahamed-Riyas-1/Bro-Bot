{"version":3,"file":"PactNumber.js","sourceRoot":"","sources":["../src/PactNumber.ts"],"names":[],"mappings":";;;;;;AAAA,8CAA8C;AAC9C,gEAAqC;AAErC,yFAAyF;AACzF,gGAAgG;AAChG,8FAA8F;AAC9F,sBAAS,CAAC,MAAM,CAAC,EAAE,cAAc,EAAE,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC;AAElD,yFAAyF;AACzF,+DAA+D;AAC/D,kEAAkE;AAClE,sGAAsG;AACtG,8FAA8F;AAE9F,sBAAS,CAAC,SAAS,CAAC,SAAS,GAAG,SAAS,SAAS;IAChD,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,CAAC;QACtB,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;IAClD,CAAC;IACD,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC;AACzB,CAAC,CAAC;AAEF,sBAAS,CAAC,SAAS,CAAC,oBAAoB,GAAG,SAAS,oBAAoB;IACtE,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;AAC1C,CAAC,CAAC;AAEF,sBAAS,CAAC,SAAS,CAAC,aAAa,GAAG,SAAS,aAAa;IACxD,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,CAAC;QACtB,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;IAClD,CAAC;IACD,OAAO;QACL,GAAG,EAAE,IAAI,CAAC,SAAS,EAAE;KACtB,CAAC;AACJ,CAAC,CAAC;AAEF,sBAAS,CAAC,SAAS,CAAC,SAAS,GAAG,SAAS,SAAS;IAChD,IAAI,IAAI,CAAC,SAAS,EAAE,EAAE,CAAC;QACrB,OAAO,GAAG,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC;IAChC,CAAC;IACD,OAAO,GAAG,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC;AAC9B,CAAC,CAAC;AAEF,sBAAS,CAAC,SAAS,CAAC,oBAAoB,GAAG,SAAS,oBAAoB;IACtE,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;AAC1C,CAAC,CAAC;AAEF,sBAAS,CAAC,SAAS,CAAC,aAAa,GAAG,SAAS,aAAa;IACxD,OAAO;QACL,OAAO,EAAE,IAAI,CAAC,SAAS,EAAE;KAC1B,CAAC;AACJ,CAAC,CAAC;AAEF;;;;GAIG;AACH,MAAa,UAAW,SAAQ,sBAAS;IACvC,YAAmB,KAAsB;QACvC,KAAK,CAAC,KAAK,CAAC,CAAC;QACb,IAAI,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAAE,MAAM,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC;IAC5D,CAAC;CACF;AALD,gCAKC","sourcesContent":["/// <reference path=\"./extend-bignumber.ts\" />\nimport BigNumber from 'bignumber.js';\n\n// Configure BigNumber to prevent exponential notation (Scientific notation) for numbers.\n// The library supports a maximum of 1e9 digits, which I believe is sufficient for our use case.\n// It is highly unlikely that someone would pass a number with more than 1,000,000,000 digits.\nBigNumber.config({ EXPONENTIAL_AT: [-1e9, 1e9] });\n\n// In order to extend BigNumber methods correctly, I had to add the PactNumber methods to\n// the prototype of BigNumber. Then, something like this works:\n// const decimal = new PactNumber('0.9').plus(\"1\").toPactDecimal()\n// The reason is that plus (and the other methods) return a new instance of BigNumber, not PactNumber.\n// By adding the PactNumber methods to the prototype of BigNumber, this will work as expected.\n\nBigNumber.prototype.toInteger = function toInteger() {\n  if (!this.isInteger()) {\n    throw new Error('PactNumber is not an integer');\n  }\n  return this.toString();\n};\n\nBigNumber.prototype.toStringifiedInteger = function toStringifiedInteger() {\n  return JSON.stringify(this.toInteger());\n};\n\nBigNumber.prototype.toPactInteger = function toPactInteger() {\n  if (!this.isInteger()) {\n    throw new Error('PactNumber is not an integer');\n  }\n  return {\n    int: this.toInteger(),\n  };\n};\n\nBigNumber.prototype.toDecimal = function toDecimal() {\n  if (this.isInteger()) {\n    return `${this.toString()}.0`;\n  }\n  return `${this.toString()}`;\n};\n\nBigNumber.prototype.toStringifiedDecimal = function toStringifiedDecimal() {\n  return JSON.stringify(this.toDecimal());\n};\n\nBigNumber.prototype.toPactDecimal = function toPactDecimal() {\n  return {\n    decimal: this.toDecimal(),\n  };\n};\n\n/**\n * Constructs a bignumber.js instance and formats into Pact number formats.\n *\n * @alpha\n */\nexport class PactNumber extends BigNumber {\n  public constructor(value: string | number) {\n    super(value);\n    if (isNaN(Number(value))) throw new Error('Value is NaN');\n  }\n}\n"]}