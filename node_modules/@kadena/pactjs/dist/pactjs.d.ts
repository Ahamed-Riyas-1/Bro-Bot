import BigNumber from 'bignumber.js';
import type { ICommand } from '@kadena/types';
import type { IUnsignedCommand } from '@kadena/types';
import type { PactCode } from '@kadena/types';
import type { PactValue } from '@kadena/types';

/**
 * Variadic function to form a lisp s-expression application.
 * Encases arguments in parens and intercalates with a space.
 * @alpha
 */
export declare function createExp(firstArg: string, ...args: PactValue[]): PactCode;

/**
 * @alpha
 */
export declare function ensureSignedCommand(command: IUnsignedCommand | ICommand): ICommand;

/**
 * Determines if a command is signed.
 * @alpha
 * @param command -  command The command to check.
 * @returns True if the command is signed, false otherwise.
 */
export declare function isSignedCommand(command: IUnsignedCommand | ICommand): command is ICommand;

/**
 * Constructs a bignumber.js instance and formats into Pact number formats.
 *
 * @alpha
 */
export declare class PactNumber extends BigNumber {
    constructor(value: string | number);
}

export { }
import type { IPactDecimal, IPactInt } from '@kadena/types';

// in order to extends BigNumber methods correctly I had to add the PactNumber methods to the prototype of BigNumber
// here we add those methods to the interface as well, then typescript also works
declare module 'bignumber.js' {
  // eslint-disable-next-line @typescript-eslint/naming-convention
  interface BigNumber {
    toInteger(): string;
    toStringifiedInteger(): string;
    toPactInteger(): IPactInt;
    toDecimal(): string;
    toStringifiedDecimal(): string;
    toPactDecimal(): IPactDecimal;
  }
}
