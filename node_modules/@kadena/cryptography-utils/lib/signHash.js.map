{"version":3,"file":"signHash.js","sourceRoot":"","sources":["../src/signHash.ts"],"names":[],"mappings":";;;;;;AACA,0DAA6B;AAC7B,6DAA0D;AAC1D,yCAAsC;AACtC,iEAA8D;AAE9D;;;;EAIE;AACF,SAAgB,QAAQ,CACtB,IAAY,EACZ,EAAE,SAAS,EAAE,SAAS,EAAY;IAElC,MAAM,MAAM,GAAG,IAAA,uCAAkB,EAAC,IAAI,CAAC,CAAC;IACxC,MAAM,MAAM,GAAG,mBAAI,CAAC,IAAI,CAAC,QAAQ,CAC/B,MAAM,EACN,IAAA,2CAAoB,EAAC,EAAE,SAAS,EAAE,SAAS,EAAE,CAAC,CAC/C,CAAC;IACF,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,IAAA,mBAAQ,EAAC,MAAM,CAAC,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC;AAC5D,CAAC;AAVD,4BAUC","sourcesContent":["import type { IKeyPair, SignCommand } from '@kadena/types';\nimport nacl from 'tweetnacl';\nimport { base64UrlDecodeArr } from './base64UrlDecodeArr';\nimport { binToHex } from './binToHex';\nimport { toTweetNaclSecretKey } from './toTweetNaclSecretKey';\n\n/**\n Sign a hash using key pair\n\n * @alpha\n*/\nexport function signHash(\n  hash: string,\n  { secretKey, publicKey }: IKeyPair,\n): SignCommand {\n  const hshBin = base64UrlDecodeArr(hash);\n  const sigBin = nacl.sign.detached(\n    hshBin,\n    toTweetNaclSecretKey({ secretKey, publicKey }),\n  );\n  return { hash, sig: binToHex(sigBin), pubKey: publicKey };\n}\n"]}